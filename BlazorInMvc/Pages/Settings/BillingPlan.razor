 @page "/billing-plans"
@using Domain.Entity.Settings
@using Domain.Services
@using Microsoft.AspNetCore.Components.Forms
@using Pms.Data.Repository
 
@inject BillingPlanService BillingPlanService

<h3>Billing Plans</h3>

@if (billingPlans == null)
{
    <p>Loading...</p>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="ShowAddForm">Add Billing Plan</button>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Plan Name</th>
                <th>Language ID</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var plan in billingPlans)
            {
                <tr>
                    <td>@plan.BillingPlanName</td>
                    <td>@plan.LanguageId</td>
                    <td>@plan.Status</td>
                    <td>
                        <a class="btn btn-warning" onclick="() => EditBillingPlan(plan)">Edit</a>
                        <a class="btn btn-danger" @onclick="() => DeleteBillingPlan(plan.BillingPlanId)">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showForm)
{
    <EditForm Model="currentBillingPlan" OnValidSubmit="SaveBillingPlan">
        <h4>@(currentBillingPlan.BillingPlanId == 0 ? "Add Billing Plan" : "Edit Billing Plan")</h4>
        <div class="form-group">
            <label>Billing Plan Name</label>
            <InputText @bind-Value="currentBillingPlan.BillingPlanName" class="form-control" />
        </div>
        <div class="form-group">
            <label>Language ID</label>
            <InputNumber @bind-Value="currentBillingPlan.LanguageId" class="form-control" />
        </div>
        <div class="form-group">
            <label>Status</label>
            <InputText @bind-Value="currentBillingPlan.Status" class="form-control" />
        </div>
        <button class="btn btn-primary" type="submit">Save</button>
        <button class="btn btn-secondary" @onclick="HideForm">Cancel</button>
    </EditForm>
}

@code {
    private List<BillingPlans>? billingPlans;
    private BillingPlans currentBillingPlan = new();
    private bool showForm = false;

    protected override async Task OnInitializedAsync()
    {
      //  billingPlans = await BillingPlanService.GetAllBillingPlansAsync();
    }

    private void ShowAddForm()
    {
        currentBillingPlan = new BillingPlans();
        showForm = true;
    }

    private void EditBillingPlan(BillingPlans plan)
    {
        currentBillingPlan = plan;
        showForm = true;
    }

    private async Task SaveBillingPlan()
    {
        // if (currentBillingPlan.BillingPlanId == 0)
        // {
        //     await BillingPlanService.AddBillingPlanAsync(currentBillingPlan);
        // }
        // else
        // {
        //     await BillingPlanService.UpdateBillingPlanAsync(currentBillingPlan);
        // }

        // billingPlans = await BillingPlanService.GetAllBillingPlansAsync();
        HideForm();
    }

    private void HideForm()
    {
        showForm = false;
    }

    private async Task DeleteBillingPlan(long id)
    {
        // await BillingPlanService.DeleteBillingPlanAsync(id);
        // billingPlans = await BillingPlanService.GetAllBillingPlansAsync();
    }
}

@using Domain.Entity.Settings
@model List<Unit>
<!-- Left Section: List -->

    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-3">
     <h5 class="mb-0 text-dark dark__text-light">Unit List <strong>(@Model.Count)</strong></h5>
 
    </div>

    <!-- Search -->
    <div class="input-group input-search-width mb-3">
        <input class="form-control form-control-sm shadow-none form-rounded w-95"
               type="search"
               placeholder="Search by name"
           aria-label="search"  
           id="unitSearch"
           onkeyup="filterUnits()" />
        <button class="btn btn-sm btn-outline-primary">
              <i class="fa fa-search"></i>  
            
        </button>
    </div>

 
    <!-- Items List -->
<div class="list-group" id="unitList" style="max-height: 300px; overflow-y: auto;">
        @foreach (var unit in Model)
    { 
        <div class=" unit-item">
            <p class="d-flex justify-content-between align-items-center border-bottom py-2 mb-0">
                <span class="text-dark dark__text-light">@unit.UnitName</span>
                <button class="btn btn-sm btn-outline-primary" onclick="LoadEditModeDataUnit('@unit.UnitId')">
                    <i class="fa fa-edit me-1"></i>
                </button>
            </p>
        </div>
    }
         
 </div>
 

<script>
    function LoadEditModeDataUnit(id) {
        $.ajax({
            url: '/Unit/LoadEditModeData', // Your action URL
            type: 'GET', // Use GET method
            data: { id: id }, // Send the ID as a query string parameter
            success: function (result) {
                // On success, replace the content of a container with the returned partial view
                $('#AddContainer').html(result);
            },
            error: function (xhr, status, error) {
                console.log('Error:', error);
                alert('An error occurred while loading the data. Please try again.');
            }
        });
    }
</script>
<script>
    function filterUnits() {
        // Get the search term
        const searchInput = document.getElementById('unitSearch');
        const filter = searchInput.value.toLowerCase();
      
        // Get all the unit items
        const unitList = document.getElementById('unitList');
        const items = unitList.getElementsByClassName('unit-item');
        
        // Loop through the items and toggle visibility
        for (let i = 0; i < items.length; i++) {
            const unitName = items[i].querySelector('span').textContent.toLowerCase();

            // Show or hide the item based on the search term
            if (unitName.indexOf(filter) > -1) {
                items[i].style.display = "block"; // Show matching item
            } else {
                items[i].style.display = "none"; // Hide non-matching item
            }
        }
    }
</script>
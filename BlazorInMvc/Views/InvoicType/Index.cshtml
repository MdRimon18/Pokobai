@using Domain.CommonServices
@using Domain.Entity.Settings
@using Domain.ViewModel
 @model IEnumerable<InvoiceType>
<div aria-live="polite" aria-atomic="true" class="position-relative" style="z-index: 9999;">
    <div class="toast-container position-fixed top-0 end-0 p-3">
        <!-- Single Reusable Toast -->
        <div id="globalToast" class="toast align-items-center text-white d-none" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body"></div>
                <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
</div>
<div class="offcanvas offcanvas-end" id="offcanvasRight" tabindex="-1" aria-labelledby="offcanvasRightLabel">
    <div class="offcanvas-header">
        <div class="card-header">
            <h5 class="mb-0">Add New Invoice Types</h5>
        </div>
       
        <button class="btn-close text-reset" type="button" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div class="col-lg-12 ps-lg-2 mb-3">
            <div class="row g-0 h-100 align-items-stretch">
                <div class="col-lg-12 mb-3">
                    <div class="pb-0">

                        <div class="collapse show" id="experience-form">
                            <form id="invoiceTypeForm">
                                <input type="hidden" id="InvoiceTypeId" name="InvoiceTypeId" />
                                <input type="hidden" id="InvoiceTypeKey" name="InvoiceTypeKey" />
                                <input type="hidden" id="EntryDateTime" name="EntryDateTime" />
                                <input type="hidden" id="EntryBy" name="EntryBy" />

                                <input type="hidden" id="Status" name="Status" />
                                <div class="row">
                                    <div class="col-3 mb-3 text-lg-end">
                                        <label class="form-label fw-semi-bold" for="InvoiceTypeName">Invoice Type Name<span class="error-star">*</span></label>
                                    </div>
                                    <div class="col-9 col-sm-7 mb-3">
                                        <input type="text" class="form-control form-control-sm form-rounded" id="InvoiceTypeName" name="InvoiceTypeName" />
                                        <span class="text-danger" id="InvoiceTypeNameError"></span>
                                    </div>
                                    <div class="col-9 col-sm-7 offset-3">
                                        <button class="btn btn-primary" type="button" onclick="saveOrUpdate()">Save</button>
                                    </div>
                                </div>
                            </form>
                            <div class="border-dashed-bottom my-4"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

 
<div class="card mb-3" id="customersTable">
    <div class="card-header">
        <div class="row flex-between-center">
            <div class="col-4 col-sm-auto d-flex align-items-center pe-0">

                <h5 class="fs-9 mb-0 text-nowrap py-2 py-xl-0 me-3">Invoice Types</h5>
                <div class="row  mb-0 ml-2 g-3 align-items-center">
                    @* <div class="card-body pt-0 pt-md-3">
                        <div class="row g-3 align-items-center">

                            <div class="col">
                                <form class="position-relative">
                                    <input class="form-control form-control-sm search-input lh-1 rounded-2 ps-4" id="searchInput" type="search" placeholder="Search..." aria-label="Search" />
                                    <div class="position-absolute top-50 start-0 translate-middle-y ms-2"><span class="fas fa-search text-400 fs-10"></span></div>
                                    <span class="input-group-text clear-icon position-absolute" id="clearSearch" style="display: none; cursor: pointer;">✖</span>
                                </form>
                            </div>

                        </div>
                    </div> *@

                    <div class="col-md-12">
                        <div class="input-group">

                            <input class="form-control form-control-sm search-input lh-1 rounded-2 ps-4"
                                   id="searchInput"
                                   type="search"
                                   placeholder="Search.. (Press Enter to search)" aria-label="Search" value="" />
                            <div class="position-absolute top-50 start-0 translate-middle-y ms-2"><span class="fas fa-search text-400 fs-10"></span></div>
                            <span class="input-group-text clear-icon" id="clearSearch" style="display: none; cursor: pointer;">✖</span>


                        </div>
                    </div>
                </div>
            </div>
            <div class="col-4 col-sm-auto text-end ps-2">

                <div id="table-customers-replace-element">
                    <button class="btn btn-falcon-default btn-sm" type="button" data-bs-toggle="offcanvas"
                            data-bs-target="#offcanvasRight" aria-controls="offcanvasRight" onclick="resetForm()">
                        <span class="fas fa-plus" data-fa-transform="shrink-3 down-2"></span><span class="d-none d-sm-inline-block ms-1">New</span>
                    </button>
                    @*  <button class="btn btn-falcon-default btn-sm mx-2" type="button"><span class="fas fa-filter" data-fa-transform="shrink-3 down-2"></span><span class="d-none d-sm-inline-block ms-1">Filter</span></button>
                    <button class="btn btn-falcon-default btn-sm" type="button"><span class="fas fa-external-link-alt" data-fa-transform="shrink-3 down-2"></span><span class="d-none d-sm-inline-block ms-1">Export</span></button> *@
                </div>
            </div>
        </div>
    </div>
    <div id="tableContainer">
        @await Html.PartialAsync("_InvoiceList", new InvoiceTypeViewModel { InvoiceTypes = Model.ToList(), CurrentPage = 1, TotalPages = 1, PageSize = 10, TotalRecords = Model.Count() })
    </div>



</div>


<script type="text/javascript">
    // let currentPage = 1;
    //let pageSize = 5;
    
    sortColumn = 'InvoiceTypeId';
    sortDirection = 'asc';

    window.loadTable=function () {
        $.ajax({
            url: '@Url.Action("LoadTable", "InvoicType")',
            type: 'GET',
            data: {
                page: currentPage,
                pageSize: pageSize,
                  search: searchPartial,
                sortColumn: sortColumn,
                sortDirection: sortDirection
            },
            success: function (response) {
                $('#tableContainer').html(response);
                bindEvents(); // Rebind events after updating the table
            },
            error: function () {
                alert('Error loading table data.');
            }
        });
    }

    function bindEvents() {
        // Pagination click
        $('.page-link').on('click', function (e) {
            e.preventDefault();
            const page = $(this).data('page');
            if (page && !$(this).parent().hasClass('disabled')) {
                currentPage = page;
                loadTable();
            }
        });

        // Sorting click on <th>
        $('.sort-th').on('click', function (e) {
            e.preventDefault();
            sortColumn = $(this).data('column');
            sortDirection = $(this).data('direction');
            loadTable();
        });
    }

    // Search input
    // $('#searchInput').on('keyup', function () {
    //     search = $(this).val();
    //     currentPage = 1; // Reset to first page on search
    //     loadTable();
    // });
    // Search on Enter key
    $('#searchInput').on('keypress', function (e) {
        if (e.which === 13) { // Enter key
            searchPartial = $(this).val();
            currentPage = 1; // Reset to first page on search
            loadTable();
        }
    });
    // Remove data function (unchanged)

    // Show/hide clear icon and handle input changes
    $('#searchInput').on('input', function () {
        const value = $(this).val();
        if (value.length > 0) {
            $('#clearSearch').show();
        } else {
            $('#clearSearch').hide();
            // Auto-refresh to page 1 when input is cleared
              if (searchPartial !== '') { // Only refresh if there was a previous search
                  searchPartial = '';
                currentPage = 1;
                loadTable();
            }
        }
    });

    // Clear search on icon click
    $('#clearSearch').on('click', function () {
        $('#searchInput').val('');
        $(this).hide();
         searchPartial = '';
        currentPage = 1;
        loadTable();
    });

    function RemoveData(id) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '@Url.Action("RemoveData", "InvoicType")?id=' + id,
                    type: 'GET',
                    success: function (response) {
                        if (response) {
                            Swal.fire(
                                'Deleted!',
                                'Your file has been deleted.',
                                'success'
                            ).then(() => {
                                loadTable(); // Refresh table after delete
                            });
                        } else {
                            Swal.fire(
                                'Error!',
                                'Something went wrong.',
                                'error'
                            );
                        }
                    },
                    error: function () {
                        Swal.fire(
                            'Error!',
                            'Something went wrong.',
                            'error'
                        );
                    }
                });
            }
        });
    }

    // Initial binding of events
    $(document).ready(function () {
        bindEvents();
        loadTable();
    });
</script>

<script>
    function saveOrUpdate() {
         const form = document.getElementById("invoiceTypeForm");
         const formData = new FormData(form);

         let invoiceTypeId = formData.get("InvoiceTypeId");
         invoiceTypeId = invoiceTypeId ? parseInt(invoiceTypeId) : 0;
         console.log(invoiceTypeId)
         const invoiceTypeName = formData.get("InvoiceTypeName");
         const invoiceTypeKey = formData.get("InvoiceTypeKey");

         const entryDateTime = formData.get("EntryDateTime");
         const entryBy = formData.get("EntryBy");
         let status = formData.get("Status");
           status = status ? status : "Active";


          if (!invoiceTypeName) {
         const errorElement = document.getElementById("InvoiceTypeNameError");
         if (errorElement) {
             errorElement.innerText = "Invoice Type Name is required.";
         } else {
             console.error("Error element not found: InvoiceTypeNameError");
         }
         return;
     }

         fetch(`/InvoicType/ManageInvoiceType`, {
             method: "POST",
             body: JSON.stringify({
                 InvoiceTypeId: invoiceTypeId,
                 InvoiceTypeName: invoiceTypeName,
                 InvoiceTypeKey: invoiceTypeKey,
                 EntryDateTime: entryDateTime,
                 EntryBy: entryBy,
                 Status: status
             }),
             headers: {
                 "Content-Type": "application/json"
             }
         })
             .then(response => response.json())
             .then(data => {
                 if (data.success) {
                     if(invoiceTypeId==0){
                      sortColumn = 'InvoiceTypeId';
                      sortDirection = 'desc';
                     
                       showToast("success",data.message);
                    }else{
                   
                     showToast("success",data.message);
                   }

                   loadTable(); 
                     form.reset();
                       document.querySelector('#offcanvasRight .btn-close').click();

                 } else {
                     showToast("danger",data.message);
                     //showToast("warning", "Be cautious while performing this action.");
                     // Handle validation errors
                     console.log(data.errors);
                     // for (const key in data.errors) {
                     //     document.getElementById(`${key}Error`).innerText = data.errors[key];
                     // }
                 }
             })
             .catch(error => showToast("Error saving invoice type:", error));
     }

     function editLoadInvoiceData(invoiceTypeId) {
         fetch(`/api/InvoiceType/GetById?id=${invoiceTypeId}`)
             .then(response => response.json())
             .then(data => {
               //  console.log(data)
             const form = document.getElementById("invoiceTypeForm");
             form.elements["InvoiceTypeId"].value = data.invoiceTypeId;
             form.elements["InvoiceTypeKey"].value = data.invoiceTypeKey;

             form.elements["EntryDateTime"].value = data.entryDateTime ? data.entryDateTime.split('T')[0] : '';
             form.elements["EntryBy"].value = data.entryBy;

             form.elements["Status"].value = data.status;
             form.elements["InvoiceTypeName"].value = data.invoiceTypeName;

            // console.log(form.elements)
         })
             .catch(error => console.error("Error loading invoice type data:", error));
     }

      function resetForm() {
        const form = document.getElementById("invoiceTypeForm");
        form.reset();
        form.elements["InvoiceTypeId"].value = 0;
        form.elements["InvoiceTypeKey"].value = "00000000-0000-0000-0000-000000000000";
            form.elements["EntryDateTime"].value = new Date().toISOString();
        form.elements["EntryBy"].value =0;
        form.elements["Status"].value = "Active";
    }
</script>


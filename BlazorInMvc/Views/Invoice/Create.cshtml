@using Domain.CommonServices
@using Domain.Entity.Settings
@model Domain.ViewModel.InvoiceViewModel
<style>
    .hidden {
        display: none;
    }

    .form-rounded {
        border-radius: 5px; /* Adjust as desired */
    }

   /*  td input.form-control {
        min-width: 70px;
    }
 */
    td {
        white-space: nowrap;
        vertical-align: middle;
    }

    .no-spinner::-webkit-outer-spin-button,
    .no-spinner::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .no-spinner {
        -moz-appearance: textfield;
    }

    body.dark-mode .text-dark,
    body.dark-mode .text-muted {
        color: #f8f9fa !important; /* Light color for dark backgrounds */
    }

</style>
@* show toaster *@
<div aria-live="polite" aria-atomic="true" class="position-relative" style="z-index: 9999;">
    <div class="toast-container position-fixed top-0 end-0 p-3">
        <!-- Single Reusable Toast -->
        <div id="globalToast" class="toast align-items-center text-white d-none" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body"></div>
                <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
</div>
<div class="offcanvas offcanvas-end" id="offcanvasRight" tabindex="-1" aria-labelledby="offcanvasRightLabel" style="width: 55%;">
    <div class="offcanvas-header">
        @*  <div class="card-header">
        <h5 class="mb-0" data-anchor="data-anchor">
        <i class="fas fa-arrow-left"></i>
        Customer/Buyer Profile
        </h5>
        </div> *@
        <button class="btn-close text-reset" type="button" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body bg-body-tertiary">
        @await Html.PartialAsync("~/Views/User/Create.cshtml", new User { RoleId = SelectedUserRole.CustomerRoleId, RoleName = RoleHelper.GetRoleName(SelectedUserRole.CustomerRoleId) })
     @*    @await Html.PartialAsync("/Views/Patient/CreateProfile.cshtml",Model.Suppliers) *@

    </div>
</div>

<div class="offcanvas offcanvas-end" id="offcanvasRight-1" tabindex="-1" aria-labelledby="offcanvasRightLabel" style="width: 50%;">
    <div class="offcanvas-header">
        <div class="card-header">
            <h5 class="mb-0">
                @*  <i class="fas fa-arrow-left"></i> *@
                Choose Product
            </h5>
        </div>
        <button class="btn-close text-reset" type="button" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content border-0">
                <div class="modal-body p-0">
                    <div class="d-lg-flex justify-content-between">
                        <div class="row flex-between-center gy-2 px-1 mb-2">
                            <div class="col-auto pe-0">
                                <div class="input-group" style="max-width: 350px; width: 100%;">
                                    <input class="form-control form-control-sm shadow-none"
                                           type="search"
                                           placeholder="Search by Name/SKU/Code"
                                           aria-label="search"
                                           asp-for="SrchQuery"
                                           oninput="OnProductSearchInOffCanva(event)" />

                                    <button type="button" class="btn btn-sm btn-outline-secondary border-300 hover-border-secondary">
                                        <span class="fa fa-search fs-10"></span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row g-0" id="product-container">
                     


                      @*   @foreach (var item in  Model.FilteredItemsOffCanva)
                        {
                            <div class="col-md-4 ps-md-2">
                                <div class="card mb-3 zoom-card">
                                    
                                    <div class="card-body bg-body-tertiary">
                                        <div class="tab-content">
                                            <div class="tab-pane preview-tab-pane active" role="tabpanel">
                                                <div class="avatar avatar-4xl mb-3">
                                                    <img class="rounded-soft" src="~/assets/img/products/1.jpg" alt="Product Image" />
                                                </div>
                                                <!-- Additional Product Information -->
                                                <div class="product-info">
                                                    <p class="mb-1"><strong>Category:</strong> @item.ProdCtgName</p>
                                                    <p class="mb-1"><strong>Brand:</strong> BrandName</p>
                                                    <p class="mb-1"><strong>Name:</strong> @item.ProdName</p>
                                                    <p class="mb-1"><strong>Price:</strong> @item.SellingPrice</p>
                                                    <p class="mb-1"><strong>SKU:</strong> @item.Sku</p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="d-flex justify-content-end mt-3">
                                            <button class="btn btn-sm btn-falcon-primary" type="button" onclick="() => OnSelectProduct(item)">
                                                Add
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>



                        } *@



                    </div>
                </div>
            </div>
        </div>
    </div>
    @* <div class="card-footer">
    <div class="row">
    <div class="pagination d-none"></div>
    <div class="col-md-8">
    <div class="row">
    <div class="col-md-6">
    <span class="d-none d-sm-inline-block me-2 fs-10">page 1 of 1, Total Record 9 </span>

    </div>
    <div class="col-md-2">

    <PageSizeSelection SelectedPageSize="1" SelectedPageSizeChanged="HandlePageSizeChanged" />
    </div>
    </div>
    </div>
    <div class="col-md-4">
    <div class="col-auto d-flex justify-content-end">

    <PaginationV2 TotalPages="1" CurrentPage="5" OnPageChange="ChangePage" />

    </div>
    </div>

    </div>

    </div> *@
</div>
 

@foreach (var tp in Model.InvoiceTypeList.OrderBy(o=>o.InvoiceTypeId))
{
    <button class="btn btn-falcon-default btn-sm ms-2 toggle-button" type="button" onclick="">@tp.InvoiceTypeName</button>

}

<div class="card mt-2">

    <div class="card-header bg-body-tertiary">
        <h5 class="mb-0"><i class="fas fa-arrow-left"></i>Create Invoice</h5>
    </div>
    <div class="card-body">
       
       
            <div class="tab-content">
                <div class="row g-3">
                    <div class="col-lg-10 col-md-10 col-sm-10 col-10">
                        <form>
                        <input type="hidden" asp-for="CustomerId" />
                        <input type="hidden" asp-for="Invoice.InvoiceId" />
                        <input type="hidden" asp-for="Invoice.InvoiceKey" />
                        <input type="hidden" asp-for="Invoice.InvoiceNumber" />
                        <input type="hidden" asp-for="Invoice.EntryBy" />
                        <input type="hidden" asp-for="Invoice.EntryDateTime" />

                            <div class="row g-3">
                               
                            <div class="col-lg-3 col-md-3 col-sm-9 col-9 animated-div">
                                <div class="form-group">
                                    <label for="CustomerName" class="form-label fw-semi-bold">Customer Name <span class="error-star">*</span></label>
                                    <input type="text" readonly style="border-radius: 5px;" asp-for="CustomerName" class="form-control form-control-sm form-rounded fw-semi-bold" placeholder="Customer Name" />
                                   
                                    <span asp-validation-for="CustomerName" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-6 col-9 animated-div">
                                <div class="form-group position-relative">
                                    <label for="chooseMobile" class="form-label fw-semi-bold">Mobile</label>
                                    <span class="error-star">*</span>

                                    <div class="input-group">
                                        <input type="text"
                                               asp-for="Invoice.MobileNo"
                                               class="form-control form-control-sm form-rounded"
                                               placeholder="Search..."
                                               id="chooseMobile"
                                               oninput="handleSearchCustomer(this.value)" />

                                        <!-- Clear (X) button -->
                                        <button type="button"
                                                class="btn btn-sm position-absolute top-0 end-0 me-5 d-none"
                                                id="clearBtnCustomer">
                                            ×
                                        </button>

                                        <!-- Plus button -->
                                        <button type="button"
                                                class="btn btn-outline-primary btn-sm px-3 py-1 ms-2"
                                                id="plusButton"
                                                data-bs-toggle="offcanvas"
                                                data-bs-target="#offcanvasRight"
                                                aria-controls="offcanvasRight">
                                            +
                                        </button>
                                    </div>

                                    <span asp-validation-for="Mobile" class="text-danger"></span>

                                    <div class="dropdown-menu border font-base mt-1 w-100 spa-link mt-4" id="searchDropdownCustomer" style="display: none;">
                                        <div class="list py-2" style="max-height: 15rem; overflow-y: auto;"></div>
                                        <div class="text-center">
                                            <p class="fw-bold fs-8 d-none">No Results Found.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

               @*              <div class="col-lg-3 col-md-3 col-sm-6 col-9 animated-div">
                                <div class="form-group position-relative">
                                    <label for="chooseMobile" class="form-label fw-semi-bold">Mobile</label><span class="error-star">*</span>
                                    <div class="input-group">
                                        <input type="text" asp-for="Invoice.MobileNo" class="form-control form-control-sm form-rounded" placeholder="Search..." id="chooseMobile" oninput="handleSearchCustomer(this.value)" />
                                        <!-- Clear (X) button -->
                                        <button type="button" class="btn btn-sm  position-absolute top-0 end-0 me-5 d-none" id="clearBtnCustomer">×</button>
                                        <button class="btn btn-sm btn-light" type="button" id="plusButton" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight">+</button>
                                        <span asp-validation-for="Mobile" class="text-danger"></span>

                                        <div class="dropdown-menu border font-base mt-1 w-100 spa-link mt-4" id="searchDropdownCustomer" style="display: none;">
                                            <div class="list py-2" style="max-height: 15rem; overflow-y: auto;"></div>
                                            <div class="text-center">
                                                <p class="fw-bold fs-8 d-none">No Results Found.</p>
                                            </div>
                                        </div>
                                    </div>
                                   
                                </div>
                            </div> *@
                                <div class="col-lg-3 col-md-3 col-sm-9 col-9 animated-div">
                                    <div class="form-group">
                                        <label for="CustomerEmail" class="form-label fw-semi-bold">Customer Email</label>
                                      

                                    <div class="position-relative form-group">
                                        <input type="text" asp-for="Invoice.Email" class="form-control form-control-sm form-rounded" placeholder="Search Email" id="CustomerEmail" oninput="handleSearchEmail(this.value)" />
                                        <!-- Clear (X) button -->
                                        <button type="button" class="btn btn-sm  position-absolute top-0 end-0 me-5 d-none" id="clearBtnEmail">×</button>
                                       
                                        <span asp-validation-for="Mobile" class="text-danger"></span>

                                        <div class="dropdown-menu border font-base mt-1 w-100 spa-link" id="searchDropdownEmail" style="display: none;">
                                            <div class="list py-2" style="max-height: 15rem; overflow-y: auto;"></div>
                                            <div class="text-center">
                                                <p class="fw-bold fs-8 d-none">No Results Found.</p>
                                            </div>
                                        </div>
                                    </div>
                                       <span asp-validation-for="CustomerEmail" class="text-danger"></span>
                                    </div>
                                </div>

                                <div class="col-lg-3 col-md-3 col-sm-9 col-9 animated-div">
                                    <div class="form-group">
                                        <label for="NotificationById" class="form-label fw-semi-bold">Notification Send By</label><span class="error-star">*</span>
                                        <select asp-for="Invoice.NotificationById" id="NotificationById" class="form-select form-rounded form-select-sm">
                                            <option value="">Select Notification</option>
                                            @foreach (var item in Model.NotificationByList)
                                            {
                                                <option value="@item.NotificationById">@item.NotificationByName</option>
                                            }
                                        </select>
                                    <span asp-validation-for="Invoice.NotificationById" class="text-danger"></span>
                                    </div>
                                </div>

                                <div class="col-lg-3 col-md-3 col-sm-9 col-9 animated-div">
                                    <div class="form-group">
                                        <label for="InvoiceDateTime" class="form-label fw-semi-bold">Date</label>
                                        <input type="date" asp-for="Invoice.InvoiceDateTime" id="InvoiceDateTime" class="form-control form-control-sm form-rounded fw-semi-bold" placeholder="Date" />
                                    </div>
                                </div>

                                <div class="col-lg-3 col-md-3 col-sm-6 col-9 animated-div">
                                    <div class="form-group">
                                        <label for="SalesByName" class="form-label fw-semi-bold">Seller</label>
                                        <input asp-for="Invoice.SalesByName" id="SalesByName" readonly name="salesBy" type="text" class="form-control form-control-sm form-rounded fw-semi-bold" placeholder="seller" required />
                                    </div>
                                </div>

                                <div class="col-lg-3 col-md-3 col-sm-9 col-9 animated-div">
                                    <div class="form-group">
                                        <label for="PaymentTypeId" class="form-label fw-semi-bold">Payment Type</label><span class="error-star">*</span>
                                        <select asp-for="Invoice.PaymentTypeId" id="PaymentTypeId" class="form-select form-rounded form-select-sm">
                                            <option value="">Select Payment Type</option>
                                            @foreach (var item in Model.PaymentTypesList)
                                            {
                                                <option value="@item.PaymentTypeId">@item.PaymentTypesName</option>
                                            }
                                        </select>
                                        <span asp-validation-for="Invoice.PaymentTypeId" class="text-danger"></span>
                                    </div>
                                </div>

                                <div class="col-lg-3 col-md-3 col-sm-9 col-9 animated-div">
                                    <div class="form-group">
                                        <label for="categorySelect" class="form-label fw-semi-bold">Category</label>
                                        <select  id="categorySelect" class="form-select form-rounded form-select-sm">
                                            <option value="">Select Category</option>
                                            @foreach (var item in Model.ProductCategoryList)
                                            {
                                                <option value="@item.ProdCtgId">@item.ProdCtgName</option>
                                            }
                                        </select>
                                    </div>
                                </div>

                                <div class="col-lg-3 col-md-3 col-sm-6 col-12 animated-div">
                                    <div class="form-group">
                                        <label for="subCategorySelect" class="form-label fw-semi-bold">Sub Category</label>
                                        <select id="subCategorySelect" class="form-select form-rounded form-select-sm">
                                            <option value="">Select Sub Category</option>
                                            @foreach (var item in Model.ProductSubCategoryList)
                                            {
                                                <option value="@item.ProdSubCtgId">@item.ProdSubCtgName</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                             
                            <div class="col-lg-6 col-md-6 col-sm-6 col-12 animated-div">
                                <div class="form-group position-relative">
                                    <label for="chooseProduct" class="form-label fw-semi-bold">Search by Product Name/Sku/Code</label><span class="error-star text-danger">*</span>
                                    <div class="input-group input-group-sm">
                                        <input type="text" class="form-control form-control-sm form-rounded border-start-0" placeholder="Search..." id="chooseProduct" aria-label="Search" oninput="handleSearch(this.value)" />
                                        <!-- Clear (X) button -->
                                        <button type="button" class="btn btn-sm  position-absolute top-0 end-0 me-5 d-none" id="clearBtn">×</button>
                                        <button type="button"
                                                class="btn btn-outline-primary btn-sm px-3 py-1 ms-2"
                                                data-bs-toggle="offcanvas"
                                                data-bs-target="#offcanvasRight-1"
                                                aria-controls="offcanvasRight-1">
                                            +
                                        </button>
                                      @*   <button class="btn btn-sm btn-light" type="button"  
                                        data-bs-toggle="offcanvas" 
                                        data-bs-target="#offcanvasRight-1"
                                        aria-controls="offcanvasRight-1">+</button> *@
                                    </div>
                                    <div class="dropdown-menu border font-base mt-1 w-100 spa-link" id="searchDropdown" style="display: none;">
                                        <div class="list py-2" style="max-height: 15rem; overflow-y: auto;"></div>
                                        <div class="text-center">
                                            <p class="fw-bold fs-8 d-none">No Results Found.</p>
                                        </div>
                                    </div>
                                </div>
                             
                            </div>

                            <div class="col-sm-3 col-md-3 col-lg-3 col-12">
                                    <div class="form-group">
                                        <label for="remarks" class="form-label fw-semi-bold">Notes</label>
                                        <textarea asp-for="Invoice.Notes" id="remarks" class="form-control form-control-sm form-rounded fw-semi-bold" placeholder="Notes" cols="60" rows="1"></textarea>
                                    </div>
                                </div>
                            </div>


                            @* Item List Array *@
                            <div class="row">
                                <div class="table-responsive scrollbar mt-4">
                                <table class="table table-sm mb-0 fs-10 table-view-tickets" id="invoiceItemsTable">
                                        <thead class="thdchild">
                                            <tr>
                                                <th class="form-label fw-bold">Image</th>
                                                <th scope="col" class="form-label fw-bold">Category</th>
                                               <th scope="col" class="form-label fw-bold">Sub Ctg.</th>
                                                <th scope="col" class="form-label fw-bold">Name</th>
                                                <th scope="col" class="form-label fw-bold">Quantity <span class="error-star"><strong class="bigger-asterisk">*</strong></span></th>
                                                <th scope="col" class="form-label fw-bold">Unit</th>
                                                <th scope="col" class="form-label fw-bold">Rate</th>
                                                <th scope="col" class="form-label fw-bold">VAT(%)</th>
                                                <th scope="col" class="form-label fw-bold">Discount(%)</th>
                                                <th scope="col" class="form-label fw-bold">Amount</th>
                                                <th scope="col" class="form-label fw-bold">Action</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                    
                                    </table>
                                </div>

                            </div>

                            <div class="row align-items-center mt-2">
                                <div class="col-auto d-flex">
                                <a class="btn btn-outline-primary btn-sm me-1 mb-1 spa-link" onclick="postItemsToApi()">Create Invoice</a>

                              @*   <a   class="btn btn-outline-primary btn-sm me-1 mb-1 spa-link"   onclick="ShippingWithPayment()">Shipping</a> *@

                                    <button class="btn btn-outline-secondary me-1 mb-1" type="button">Refresh</button>
                                </div>
                            </div>
                        </form>
                        <div class="row mt-4">

                        <div class="col-xl-12">
                            <div class=" mb-3">
                                <div class="card-header bg-body-tertiary">
                                    <div class="row flex-between-center">
                                        <div class="col-sm-auto">
                                            <h5 class="mb-2 mb-sm-0"> Shipping Address</h5>
                                        </div>

                                       @*  <div class="col-sm-auto">
                                            <a class="btn btn-falcon-default btn-sm" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight"
                                               aria-controls="offcanvasRight" onclick="resetUserAddressForm()">
                                                <span class="fas fa-plus me-2" data-fa-transform="shrink-2"></span>
                                                Add New Address
                                            </a>
                                        </div> *@
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="row" >
                                        <div class="col-md-12 mb-3 mb-md-0">
                                   <div class="form-check mb-0 custom-radio radio-select">
                                <input class="form-check-input" id="address-1" type="radio" name="clientName" checked="checked" />
                              <label class="form-check-label mb-0 fw-bold d-block" for="address-1">
                                @Model.CustomerName

                                <span class="radio-select-content"><span> 

                                    @Model.Invoice.DeliverAddress
                                     </span>
                                </span></label> 
                        </div>
                    </div>
                        
                                    </div>
                                </div>
                            </div>


                           
                                <div class="card-header bg-body-tertiary">
                                    <h5 class="mb-0">Payment Method</h5>
                                </div>
                                <div class="card-body">
                                    <div class="mt-3">
                                        <div class="form-check">
                                            <input class="form-check-input payment-option" type="checkbox" id="cod" onclick="togglePayment('cod')" checked />
                                            <label class="form-check-label" for="cod">Cash on Delivery</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input payment-option" type="checkbox" id="bank" onclick="togglePayment('bank')" />
                                            <label class="form-check-label" for="bank">Bank</label>
                                        </div>
                                    </div>

                                    <form>
                                        <div id="bank-info" class="d-none mt-3">
                                            <div class="form-check mb-2">
                                                <input class="form-check-input" type="radio" id="credit-card" name="payment-method" checked />
                                                <label class="form-check-label" for="credit-card">Credit Card</label>
                                            </div>
                                            <div class="row gx-0 ps-2 mb-4">
                                                <div class="col-sm-8 px-3">
                                                    <div class="mb-3">
                                                        <label class="form-label text-uppercase fw-semi-bold" for="inputNumber">Card Number</label>
                                                        <input class="form-control" id="inputNumber" type="text" placeholder="•••• •••• •••• ••••" />
                                                    </div>
                                                    <div class="row align-items-center">
                                                        <div class="col-6">
                                                            <label class="form-label text-uppercase fw-semi-bold">Exp Date</label>
                                                            <input class="form-control" type="text" placeholder="mm/yyyy" />
                                                        </div>
                                                        <div class="col-6">
                                                            <label class="form-label text-uppercase fw-semi-bold">CVV</label>
                                                            <input class="form-control" type="text" placeholder="123" maxlength="3" pattern="[0-9]{3}" />
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-4 ps-3 text-center pt-2 d-none d-sm-block">
                                                    <div class="rounded-1 p-2 mt-3 bg-100">
                                                        <div class="text-uppercase fs-11 fw-bold">We Accept</div>
                                                        <img src="../../assets/img/icons/icon-payment-methods-grid.png" alt="" width="120" />
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="form-check d-flex align-items-center">
                                                <input class="form-check-input" type="radio" id="paypal" name="payment-method" />
                                                <label class="form-check-label mb-0 ms-2" for="paypal">
                                                    <img src="../../assets/img/icons/icon-paypal-full.png" height="20" alt="" />
                                                </label>
                                            </div>

                                            <!-- Cash on Delivery and Bank Checkboxes -->


                                        </div>


                                        <div class="border-bottom border-dashed my-5"></div>

                                     
                                    </form>
                                </div>
                          


                            <script>
                                function togglePayment(selectedOption) {
                                    let cod = document.getElementById("cod");
                                    let bank = document.getElementById("bank");
                                    let bankInfo = document.getElementById("bank-info");

                                    if (selectedOption === "cod") {
                                        bank.checked = false;
                                        bankInfo.classList.add("d-none");
                                    } else if (selectedOption === "bank") {
                                        cod.checked = false;
                                        bankInfo.classList.remove("d-none");
                                    }
                                }

                                // Ensure Cash on Delivery is selected by default
                                document.addEventListener("DOMContentLoaded", function () {
                                    togglePayment('cod');
                                });
                            </script>
                        </div>
                        </div>

                    </div>

                <div class="col-lg-2 col-md-2 col-sm-2 col-2">
                    <div class="form-group">
                        <label class="form-label fw-bolder">Total Quantity</label>
                        <input id="TotalQnty" name="Invoice.TotalQnty" type="number" class="form-control form-control-sm form-rounded fw-bold" readonly placeholder="Total Quantity" />
                    </div>
                    <div class="form-group">
                        <label class="form-label fw-bolder">Total</label>
                        <input id="TotalAmount" name="Invoice.TotalAmount" type="number" class="form-control form-control-sm form-rounded fw-bold" readonly placeholder="Total Amount" />
                    </div>
                    <div class="form-group">
                        <label class="form-label fw-bold">Vat</label>
                        <input id="TotalVat" name="Invoice.TotalVat" type="number" class="form-control form-control-sm form-rounded fw-bold" readonly placeholder="Vat(%)" />
                    </div>
                    <div class="form-group">
                        <label class="form-label fw-bold">Discount</label>
                        <input id="TotalDiscount" name="Invoice.TotalDiscount" type="number" class="form-control form-control-sm form-rounded fw-bold" readonly placeholder="Discount(%)" />
                    </div>
                    <div class="form-group">
                        <label class="form-label fw-bold">Additional Discount</label>
                        <input id="TotalAddiDiscount" name="Invoice.TotalAddiDiscount" type="number"
                               class="form-control form-control-sm form-rounded fw-bold"
                               placeholder="Additional Discount" oninput="updateTotals()" />
                    </div>
                    <div class="form-group">
                        <label class="form-label fw-bolder">Total Payable</label>
                        <input id="TotalPayable" name="Invoice.TotalPayable" type="number" class="form-control form-control-sm form-rounded fw-bold" placeholder="Total Payable" />
                    </div>
                    <div class="form-group">
                        <label class="form-label fw-bolder">Receive</label>
                        <input id="RecieveAmount" name="Invoice.RecieveAmount" type="number" class="form-control form-control-sm form-rounded fw-bold"
                               placeholder="Receive" oninput="updateTotals()" />
                    </div>
                    <div class="form-group">
                        <label class="form-label fw-bolder">Current Due</label>
                        <input id="DueAmount" name="Invoice.DueAmount" type="number"
                               class="form-control form-control-sm form-rounded fw-bold" placeholder="Current Due" />
                    </div>
                </div>



                </div>
            </div>

            <div class="border-bottom border-dashed my-5"></div>
            <div class="row">
                <div class="col-md-7 col-xl-12 col-xxl-7 px-md-3 mb-xxl-0 position-relative">
                    <div class="d-flex">
                        <img class="me-3" src="../../assets/img/icons/shield.png" alt="" width="60" height="60" />
                        <div class="flex-1">
                            <h5 class="mb-2">Buyer/Customer Protection</h5>
                            <div class="form-check mb-0">
                                <input class="form-check-input" id="protection-option-1" type="checkbox" checked="checked" />
                                <label class="form-check-label mb-0" for="protection-option-1"> <strong>Full Refund </strong>If you don't <br class="d-none d-md-block d-lg-none" />receive your order</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" id="protection-option-2" type="checkbox" checked="checked" />
                                <label class="form-check-label mb-0" for="protection-option-2"> <strong>Full or Partial Refund, </strong>If the product is not as described in details</label>
                            </div><a class="fs-10 ms-3 ps-2" href="#!">Learn More<span class="fas fa-caret-right ms-1" data-fa-transform="down-2">    </span></a>
                        </div>
                    </div>
                    <div class="vertical-line d-none d-md-block d-xl-none d-xxl-block"> </div>
                </div>
                <div class="col-md-5 col-xl-12 col-xxl-5 ps-lg-4 ps-xl-2 ps-xxl-5 text-center text-md-start text-xl-center text-xxl-start">
                    <div class="border-bottom border-dashed d-block d-md-none d-xl-block d-xxl-none my-4"></div>
                <div class="fs-7 fw-bold">All Total: <span class="text-primary" id="TotalPayableLabel">0 tk</span></div>
                    <a   class="btn btn-success mt-3 px-5" data-spa="Invoice/PrintInvoice">Confirm &amp; Pay</a>
                    <p class="fs-10 mt-3 mb-0">By clicking <strong>Confirm & Pay </strong> button you agree to the <a >Terms &amp; Conditions</a></p>
                </div>
            </div>
         
    </div>
    
   
</div>

<div class="modal fade" id="staticBackdrop" data-bs-keyboard="false" data-bs-backdrop="static" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg mt-6" role="document">
        <div class="modal-content border-0 shadow-lg">
            <div class="position-absolute top-0 end-0 mt-3 me-3 z-1">
                <button class="btn-close btn btn-sm btn-circle d-flex flex-center transition-base" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-0">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0 fw-bold" id="staticBackdropLabel">Product Details</h5>
                    </div>
                    <div class="card-body bg-light dark__bg-1100 text-body">
                        <div class="row">
                            <!-- Left Column -->
                            <div class="col-lg-4">
                                <h4 class="text-primary mb-3">Item Information</h4>
                                <p class="fs-7 text-body">Vat Amount: <span id="vatAmount" class="fw-bold">10%</span></p>
                                <p class="fs-7 text-body">Discount Amount: <span id="discountAmount" class="fw-bold">$5.00</span></p>
                                <p class="fs-7 text-body">Date: <span id="date" class="fw-bold">24/10/2024</span></p>
                                <p class="fs-7 text-body">Warranty: <span id="warranty" class="fw-bold">2 years</span></p>
                                <p class="fs-7 text-body">Link to Supplier: <a id="supplierLink" href="#" class="fw-bold text-decoration-underline">View Supplier</a></p>
                                <p class="fs-7 text-body">Remarks: <span id="remarks" class="fw-bold">Some remarks</span></p>
                               
                                <p class="fs-7 text-body">Imported From: <span id="importedFrom" class="fw-bold">Country</span></p>
                                <p class="fs-7 text-body">Category: <span id="category" class="fw-bold">Electronics</span></p>
                            </div>
                            <!-- Middle Column -->
                            <div class="col-lg-4">
                                <h4 class="text-primary mb-3 mt-4">Pricing & Quantity</h4>
                                <p class="fs-7 text-body">Sub Category: <span id="subCategory" class="fw-bold">Smartphone</span></p>
                                <p class="fs-7 text-body">Name/Model: <span id="nameModel" class="fw-bold">Model X</span></p>
                                <p class="fs-7 text-body">Buying Price: <span id="buyingPrice" class="fw-bold">$500.00</span></p>
                                <p class="fs-7 text-body">Selling Price: <span id="sellingPrice" class="fw-bold">$700.00</span></p>
                                <p class="fs-7 text-body">Unit Type: <span id="unitType" class="fw-bold">Piece</span></p>
                                <p class="fs-7 text-body">Opening Quantity: <span id="openingQuantity" class="fw-bold">50</span></p>
                                <p class="fs-7 text-body">Alert Quantity: <span id="alertQuantity" class="fw-bold">5</span></p>
                                <p class="fs-7 text-body">Vat (in %): <span id="vatPercentage" class="fw-bold">15%</span></p>
                                <p class="fs-7 text-body">Discount (%): <span id="discountPercentage" class="fw-bold">10%</span></p>
                            </div>
                            <!-- Right Column with Image and Info -->
                            <div class="col-lg-4 d-flex flex-column align-items-center">
                                <div class="mb-3 text-center">
                                    <img id="productImage" class="rounded shadow mb-2" src="../../assets/img/gallery/2000.jpg" width="200" height="200" alt="Product Image" />
                                </div>
                                <div class="bg-light dark__bg-1100 p-3 rounded w-100 text-body">
                                    <h5 class="fw-bold">Additional Information</h5>
                                    <p class="fs-7">Stock Availability: <span id="stockAvailability" class="fw-bold">In Stock</span></p>
                                    <p class="fs-7">SKU: <span id="sku" class="fw-bold">#12345</span></p>
                                    <p class="fs-7">Supplier Rating: <span id="supplierRating" class="fw-bold">4.5/5</span></p>
                                    <p class="fs-7">Shipping Time: <span id="shippingTime" class="fw-bold">3-5 Days</span></p>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <label class="form-label fw-semi-bold" for="product-description">Product description:</label>
                            <div class="create-product-description-textarea">
                                <textarea id="tinymce-editor" class="tinymce d-none" data-tinymce="data-tinymce" ></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
 <script>
    (function () {
         let allProducts = [];
         let allCustomers=[];
         let isInitialized = false;
         let isCustomerInit=false;
         let itemRowIndex = 0;
         let serialsByProductId=[];
         let serialCurrentIndex=0;
        

         window.LoadInvoiceItems = function () {
             
               const initialItems = @Html.Raw(Json.Serialize(Model.ItemsListViewModel)); // Or ViewBag.InitialItems
               console.log('int',initialItems);
           // document.addEventListener("DOMContentLoaded", () => {
                const tableBody = document.querySelector('.table-view-tickets tbody');
               
                
                if (initialItems && Array.isArray(initialItems)) {
                    initialItems.forEach(item => {
                         
                        const rowHtml = generateItemRowHtml(item, itemRowIndex);
                        tableBody.insertAdjacentHTML('beforeend', rowHtml);

                        appendSerialRows(item.selectedSerialNumbers, itemRowIndex); // THEN append serials

                        itemRowIndex++;
                    });
                }
            //});

             // Delay updateTotals to ensure DOM is fully updated
             setTimeout(() => {
                 updateTotals();
             }, 0);
              
              // const offCanvaProducts = @Html.Raw(Json.Serialize(Model.FilteredItemsOffCanva)); // Or ViewBag.InitialItems
              // console.log(offCanvaProducts);
              // window.renderOffCanfaProducts(offCanvaProducts);
        };

          

        // Fetch products   
        async function fetchAllProducts() {
            try {
                 const response = await fetch('/api/GetProductsWithVariants');
                 const data = await response.json();
                 allProducts = data.isSuccess ? data.product_list : [];
                 console.log('[DEBUG] All products fetched:', allProducts);
                 isInitialized = true;
                 window.renderOffCanfaProducts(allProducts);
                 initializeTinyMCE();
             } catch (error) {
                console.error('Error fetching products:', error);
                allProducts = [];
                isInitialized = true;
            }
        }
         // Fetch products
         async function fetchAllCustomer() {
             try {
                     const response = await fetch(`/api/User/GetAll?roleId=10003&page=1&pageSize=1000`);
                 const data = await response.json();
                 allCustomers = data.items;
                 console.log('all customer',allCustomers)
                 isCustomerInit = true;
             } catch (error) {
                 console.error('Error fetching products:', error);
                  allCustomers =[];
                  isCustomerInit = true;
             }
         }


        // Get DOM elements dynamically
        function getElements() {
            return {
                  searchInput: document.getElementById('chooseProduct'),
                searchDropdown: document.getElementById('searchDropdown'),
                dropdownList: document.querySelector('#searchDropdown .list'),
                noResultsMessage: document.querySelector('#searchDropdown .text-center p'),
                clearBtn : document.getElementById('clearBtn')
            };
        }
          
        // Filter products
        function filterProducts(query) {

            if (!query) return [];
            query = query.toLowerCase().trim();
            console.log('[DEBUG] Filtering with query:', query);

             console.log('allProducts',allProducts);
               var productCategoryId = $('#categorySelect').val();
               var productSubCategoryId = $('#subCategorySelect').val();
                  console.log(productCategoryId,productSubCategoryId)
              
                  return allProducts.filter(product => {
             const matchesText =
                 (product.prodName && product.prodName.toLowerCase().includes(query)) ||
                 (product.sku && product.sku.toLowerCase().includes(query)) ||
                 (product.productCode && product.productCode.toLowerCase().includes(query));

               const matchesCategory =
                 !productCategoryId || product.prodCtgId == productCategoryId;

             const matchesSubCategory =
                 !productSubCategoryId || product.prodSubCtgId == productSubCategoryId;

             return matchesText && matchesCategory && matchesSubCategory;
     });
      }
 

        // Populate dropdown
        function populateDropdown(products, elements) {

            elements.dropdownList.innerHTML = '';
            console.log('[DEBUG] Populating dropdown with:', products);
            if (products.length > 0) {
                elements.noResultsMessage.classList.add('d-none');
                products.forEach(product => {
                    const item = document.createElement('a');
                    item.className = 'dropdown-item px-x1 py-2';
                    //item.href = '#';
                    item.innerHTML = `
                        <div class="d-flex align-items-center ">
                            <div class="avatar avatar-l me-2">
                                <img class="rounded-circle" src="${product.imageUrl || '../../assets/img/default-product.jpg'}" alt="${product.prodName}" />
                            </div>
                            <div class="flex-1">
                                  <h6 class="mb-0 title">${product.prodName}
                                      <span class="text-muted">(${product.productCode})</span>
                                  </h6>

                                    <p class="fs-11 mb-0 d-flex">${product.sku|| 'N/A'}</p>
                            </div>
                        </div>
                    `;
                    item.addEventListener('click', () => {
                         elements.searchInput.value = product.prodName;
                         elements.clearBtn.classList.remove('d-none');
                         elements.searchDropdown.style.display = 'none';
                        // Call your function
                       AddItemToProductList(product);

                    });

                    elements.dropdownList.appendChild(item);
                });
            } else {
                elements.noResultsMessage.classList.remove('d-none');
            }
               const searchInput = document.getElementById('chooseProduct');
               const clearBtn = document.getElementById('clearBtn');
               //const dropdownList = document.getElementById('dropdownList');

                clearBtn.addEventListener('click', () => {
                searchInput.value = '';
                clearBtn.classList.add('d-none'); // Hide the ❌ again
              //  dropdownList.style.display = 'block'; // Show dropdown list again

               // handleSearch(''); // Optional: re-trigger filtering if needed
               });
        }
        
        // Global handleSearch for oninput
        window.handleSearch = function (query) {
            if (!isInitialized) {
                return;
            }
            const elements = getElements();
            if (!elements.searchInput || !elements.searchDropdown || !elements.dropdownList || !elements.noResultsMessage) {
                console.error('[DEBUG] Elements not found in handleSearch:', elements);
                return;
            }
            console.log('[DEBUG] searchInput value from DOM:', elements.searchInput.value); // Cross-check
             const filteredProducts = filterProducts(query);
             if (filteredProducts.length > 0) {
                elements.searchDropdown.style.display = 'block';
               
                populateDropdown(filteredProducts, elements);
            } else {
                elements.searchDropdown.style.display = 'none';
                elements.dropdownList.innerHTML = '';
                elements.noResultsMessage.classList.add('d-none');
            }
        };

         
        window.handleSearchCustomer = function (query) {
        // Check if customer data is initialized
        if (!isCustomerInit) {
            console.log('[DEBUG] Customer not yet loaded, waiting...');
            return;
        }

        // Get DOM elements dynamically (inlined from getElementsCustomer)
        const searchInput = document.getElementById('chooseMobile');
        const searchDropdown = document.getElementById('searchDropdownCustomer');
         const dropdownList = document.querySelector('#searchDropdownCustomer .list');
        const noResultsMessage = document.querySelector('#searchDropdown .text-center p');
        const clearBtn = document.getElementById('clearBtnCustomer');
        const emailInput = document.getElementById('CustomerEmail');
          const customerName= document.getElementById('CustomerName');
           const customerId= document.getElementById('CustomerId');
        // Validate that all required elements are found
          if (!searchInput || !searchDropdown || !dropdownList 
              || !noResultsMessage || !clearBtn||!emailInput||!customerName||!customerId) {
            console.error('[DEBUG] Elements not found in handleSearch');
            return;
        }

        // Log the search input value for debugging
        console.log('[DEBUG] searchInput value from DOM:', searchInput.value);

        if (query.length > 0) {
            // Show the dropdown and clear button when there is a query
            searchDropdown.style.display = 'block';
            clearBtn.classList.remove('d-none');

            // Filter customers based on query (inlined from filterCustomers)
            query = query.toLowerCase().trim();
            console.log('[DEBUG] Filtering with query:', query);
            console.log('customer',allCustomers);
            const filteredCustomers = allCustomers.filter(customer =>
                 customer.phoneNo?.toLowerCase().includes(query)

             );
            console.log('filteredCustomers', filteredCustomers);

            // Populate the dropdown with filtered customers (inlined from populateDropdownCustomer)
            dropdownList.innerHTML = '';
            if (filteredCustomers.length > 0) {
                noResultsMessage.classList.add('d-none');
                 filteredCustomers.forEach(usr => {
                  
                    const item = document.createElement('a');
                    item.className = 'dropdown-item px-x1 py-2';
                    item.innerHTML = `
                        <div class="d-flex align-items-center ">
                            <div class="avatar avatar-l me-2">
                                   <img class="rounded-circle" src="${window.location.origin + usr.imgLink}" alt="" />
                            </div>
                            <div class="flex-1">
                                  <h6 class="mb-0 title">${usr.phoneNo}</h6>
                                  <p class="fs-11 mb-0 d-flex">${usr.email || 'N/A'}</p>
                            </div>
                        </div>
                    `;

                     // Add click event listener to set input and hide dropdown
                     item.addEventListener('click', () => {
                           searchInput.value = usr.phoneNo; // Or customer.email if preferred
                           emailInput.value = usr.email;
                            customerName.value=usr.name;
                            customerId.value=usr.userId;
                         searchDropdown.style.display = 'none';
                     });

                    dropdownList.appendChild(item);
                });
            } else {
                noResultsMessage.classList.remove('d-none');
            }

            // Set up clear button event listener (inlined from populateDropdownCustomer)
            clearBtn.addEventListener('click', () => {
                searchInput.value = '';
                clearBtn.classList.add('d-none');
                searchDropdown.style.display = 'none';
                dropdownList.innerHTML = '';
                noResultsMessage.classList.add('d-none');
            });
        } else {
            // Hide dropdown and reset UI when query is empty
            searchDropdown.style.display = 'none';
            dropdownList.innerHTML = '';
            noResultsMessage.classList.add('d-none');
            clearBtn.classList.add('d-none');
        }
    };

         window.handleSearchEmail = function (query) {
         // Check if customer data is initialized
         if (!isCustomerInit) {
             console.log('[DEBUG] Customer not yet loaded, waiting...');
             return;
         }

         // Get DOM elements dynamically (inlined from getElementsCustomer)
          const searchInput = document.getElementById('CustomerEmail');
          const searchDropdown = document.getElementById('searchDropdownEmail');
           const dropdownList = document.querySelector('#searchDropdownEmail .list');
         const noResultsMessage = document.querySelector('#searchDropdown .text-center p');
         const clearBtn = document.getElementById('clearBtnEmail');
         const emailInput = document.getElementById('CustomerEmail');
            const customerName= document.getElementById('CustomerName');
               const customerId= document.getElementById('CustomerId');
             const mobileNo=   document.getElementById('chooseMobile');
           // Validate that all required elements are found
             if (!searchInput || !searchDropdown || !dropdownList || !noResultsMessage
                  || !clearBtn||!emailInput||!customerName||!customerId||!mobileNo) {
               console.error('[DEBUG] Elements not found in handleSearch');
               return;
           }

         // Log the search input value for debugging
         console.log('[DEBUG] searchInput value from DOM:', searchInput.value);

         if (query.length > 0) {
             // Show the dropdown and clear button when there is a query
             searchDropdown.style.display = 'block';
             clearBtn.classList.remove('d-none');

             // Filter customers based on query (inlined from filterCustomers)
             query = query.toLowerCase().trim();
             console.log('[DEBUG] Filtering with query:', query);
             const filteredCustomers = allCustomers.filter(customer =>
                  customer.email?.toLowerCase().includes(query)
             );
             
             // Populate the dropdown with filtered customers (inlined from populateDropdownCustomer)
             dropdownList.innerHTML = '';
             if (filteredCustomers.length > 0) {
                 noResultsMessage.classList.add('d-none');
                 filteredCustomers.forEach(usr => {

                     const item = document.createElement('a');
                     item.className = 'dropdown-item px-x1 py-2';
                     item.innerHTML = `
                         <div class="d-flex align-items-center ">
                             <div class="avatar avatar-l me-2">
                                   <img class="rounded-circle" src="${window.location.origin + usr.imgLink}" alt="" />
                             </div>
                             <div class="flex-1">
                                   <h6 class="mb-0 title">${usr.phoneNo}</h6>
                                  <p class="fs-11 mb-0 d-flex">${usr.email || 'N/A'}</p>
                             </div>
                         </div>
                     `;

                      // Add click event listener to set input and hide dropdown
                      item.addEventListener('click', () => {
                           console.log('[DEBUG] Item clicked:', usr);
                              mobileNo.value = usr.phoneNo; // Or customer.email if preferred
                              emailInput.value = usr.email;
                              customerName.value=usr.name;
                              customerId.value=usr.userId;
                          searchDropdown.style.display = 'none';
                      });

                     dropdownList.appendChild(item);
                 });
             } else {
                 noResultsMessage.classList.remove('d-none');
             }

             // Set up clear button event listener (inlined from populateDropdownCustomer)
             clearBtn.addEventListener('click', () => {
                 searchInput.value = '';
                 clearBtn.classList.add('d-none');
                 searchDropdown.style.display = 'none';
                 dropdownList.innerHTML = '';
                 noResultsMessage.classList.add('d-none');
             });
         } else {
             // Hide dropdown and reset UI when query is empty
             searchDropdown.style.display = 'none';
             dropdownList.innerHTML = '';
             noResultsMessage.classList.add('d-none');
             clearBtn.classList.add('d-none');
         }
     };
        // Initialize search functionality
        window.initializeInvoiceSearch = async function () {
            console.log('[DEBUG] Initializing Invoice search');
            const elements = getElements();
             
            if (!elements.searchInput || !elements.searchDropdown) {
                console.error('[DEBUG] Required elements not found after render:', elements);
                return;
            }
             
            await fetchAllProducts(); // Fetch products and set isInitialized
            await fetchAllCustomer();
            // Attach click-outside listener (no input listener needed due to oninput)
            document.addEventListener('click', (e) => {
                if (!elements.searchInput.contains(e.target) && !elements.searchDropdown.contains(e.target)) {
                    elements.searchDropdown.style.display = 'none';
                }
            });

             
        };

        // Expose fetchAllProducts for debugging (optional)
        //window.fetchAllProducts = fetchAllProducts;

       
           window.AddItemToProductList=  function (item) {
            console.log('product', item);
         
          const tableBody = document.querySelector('.table-view-tickets tbody');
          const rowHtml = generateItemRowHtml(item, itemRowIndex);
          tableBody.insertAdjacentHTML('beforeend', rowHtml);
             const newRow = tableBody.querySelector(`tr[data-index="${itemRowIndex}"]`);
             const qtyInput = newRow?.querySelector('[name*="Quantity"]');

             if (qtyInput) {
                 updateRow(qtyInput);
             } else {
                 console.warn(`Quantity input not found for row index ${itemRowIndex}`);
             }

             itemRowIndex++;
             //showToast("success", `${item.prodName} Added Successfully.`);
              
        }
       
       

        
 
        function generateItemRowHtml(item, index) {
             console.log('Generating row for item:', item, 'at index:', index);
           console.log(item)
        return `
             <tr  data-index="${index}">
                <td>
                    <div class="col-auto">
                        <div class="avatar avatar-2xl">
                            <img class="rounded-circle" src="${item.imageUrl}" alt="${item.prodName}" />
                        </div>
                    </div>
                    <input type="hidden" name="ItemsList[${index}].ProductId" value="${item.productId}" />
                        <input type="hidden" name="ItemsList[${index}].ProductVariantId" value="${item.productVariantId}" />
                        <input type="hidden" name="ItemsList[${index}].imageUrl" value="${item.imageUrl}" />
                            <input type="hidden" name="ItemsList[${index}].buyingPrice" value="${item.buyingPrice}" />

                </td>
                   <td style="min-width:70px;"><input type="text" class="form-control form-control-sm form-rounded bold-input fw-semi-bold" readonly name="ItemsList[${index}].prodCtgName" value="${item.prodCtgName}" /></td>
                   <td style="min-width:70px;"><input type="text" class="form-control form-control-sm form-rounded bold-input fw-semi-bold" readonly name="ItemsList[${index}].prodSubCtgName" value="${item.prodSubCtgName}" /></td>
                   <td style="min-width:75px;"><input type="text" class="form-control form-control-sm form-rounded bold-input fw-semi-bold" readonly name="ItemsList[${index}].prodName" value="${item.prodName}" /></td>
                 <td style="min-width:70px;">
                    <input type="number" class="form-control form-control-sm form-rounded bold-input fw-semi-bold quantity-input"
                               placeholder="Quantity" name="ItemsList[${index}].Quantity" value="${item.quantity ?? 1}"  oninput="updateRow(this)"  />
                    <span class="text-danger validation-error" data-field="Quantity" style="display:none;">Quantity is required</span>
                </td>
                      <td style="min-width:60px;"><input type="text" class="form-control form-control-sm form-rounded fw-semi-bold" readonly name="ItemsList[${index}].unitName" value="${item.unitName}" /></td>
                 <td style="min-width:75px;">
                     <input type="number" class="form-control form-control-sm form-rounded fw-semi-bold price-input no-spinner"
                           name="ItemsList[${index}].SellingPrice" value="${item.sellingPrice}" />
                    <span class="text-danger validation-error" data-field="SellingPrice" style="display:none;">Selling Price is required</span>
                </td>
                  <td style="min-width:30px;"><input type="number" class="form-control form-control-sm form-rounded fw-semi-bold vat-input no-spinner"
                      readonly value="${item.vatPercent}" data-field="VatPercent" name="ItemsList[${index}].VatPercent" /></td>
                 <td style="min-width:40px;">
                    <input type="number" class="form-control form-control-sm form-rounded fw-semi-bold discount-input"
                           name="ItemsList[${index}].DiscountPercentg" value="${item.discountPercentg}" oninput="updateRow(this)"/>
                    <span class="text-danger validation-error" data-field="DiscountPercentg" style="display:none;">Discount is required</span>
                </td>
                 <td><input type="number" class="form-control form-control-sm form-rounded fw-semi-bold no-spinner"
                    readonly value="${item.totalPrice}" name="ItemsList[${index}].TotalPrice" /></td>

                <!-- Serial Toggle Column -->
                <td class="treeview">
                    <div class="treeview-list-item">
                        <a data-bs-toggle="collapse" href="#treeviewExample-1_${index}" role="button" aria-expanded="false">
                            <p class="treeview-text">Serial</p>
                        </a>
                    </div>
                </td>
                 <td>
                         <button type="button" title="Info" class="btn btn-sm a-light product-details-btn" onclick='showProductDetails(${JSON.stringify(item).replace(/'/g, "&apos;")})'>
        <i class="fa fa-info-circle" style="font-size:18px"></i>
    </button>
                  </td>

                <!-- Delete Button -->
                <td>
                    <button type="button" title="Delete" class="btn btn-sm btn-light" onclick="deleteDynamicRow(this)">
                        <i class="far fa-trash-alt fa-lg text-danger"></i>
                    </button>
                </td>
            </tr>

            <!-- Collapsible Row -->
            <tr>
                <td colspan="12">
                    <div class="collapse treeview-list" id="treeviewExample-1_${index}">
                        <div class="table-responsive scrollbar row">
                            <div class="col-sm-8 col-md-8 col-lg-8 col-xl-8">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th class="fw-semi-bold" scope="col">Product Name</th>
                                            <th scope="col">Serial No</th>
                                            <th scope="col">Supplier Org</th>
                                            <th scope="col">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody id="serial-body-${index}">
                                        <!-- Serial rows will be appended dynamically -->
                                    </tbody>
                                </table>
                            </div>
                        <div class="col-sm-4 col-md-4 col-lg-4 col-xl-4">
                            <label class="form-label fw-semi-bold">Add Serial Number</label>
                            <div class="d-flex align-items-center">
                                <button class="btn btn-outline-primary btn-sm ms-auto px-3 py-1"
                                        type="button"
                                        data-bs-toggle="offcanvas"
                                        data-bs-target="#offcanvasRight-2"
                                        aria-controls="offcanvasRight-2"
                                        onclick="loadSerials(${item.productId}, ${index})">
                                    +
                                </button>
                            </div>
                        </div>

                        </div>
                    </div>
                </td>
            </tr>
        `;
    }
        function appendSerialRows(selectedSerialNumbers, index) {
        const tbody = document.getElementById(`serial-body-${index}`);
        if (!tbody || !Array.isArray(selectedSerialNumbers) || selectedSerialNumbers.length === 0) return;

        selectedSerialNumbers.forEach((serial, serialIndex) => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${serial.serialNumber || ''}</td>
                <td>${serial.prodSerialNmbrId || ''}</td>
                <td>${serial.supplierOrgName || ''}</td>
                <td>
                    <button type="button" class="btn btn-tertiary ps-2" onclick="deleteSerialRow(this)">
                        <i class="fas fa-trash-alt text-danger"></i>
                    </button>
                </td>
            `;
            tbody.appendChild(row);
        });
    }

          window.appendSingleSerialRow= function (serial, index) {
        const tbody = document.getElementById(`serial-body-${index}`);
        if (!tbody || !serial) return;

        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${serial.serialNumber || ''}</td>
            <td>${serial.prodSerialNmbrId || ''}</td>
            <td>${serial.supplierOrgName || ''}</td>
            <td>
                <button type="button" class="btn btn-tertiary ps-2" onclick="deleteSerialRow(this)">
                    <i class="fas fa-trash-alt text-danger"></i>
                </button>
            </td>
        `;
        tbody.appendChild(row);
        showToast("success","A Serial Number Added Successfully.");
        
    }

             window.deleteDynamicRow = function (btn) {
            // Find the main item row and remove it
            const row = btn.closest('tr');
            const nextRow = row.nextElementSibling;

            // Try to get index for optional logging or operations
            let index = null;
            const input = row.querySelector('input[name^="ItemsList"]');
            if (input) {
                const match = input.name.match(/\[(\d+)\]/);
                if (match) {
                    index = match[1];
                }
            }

            // Remove the main row
            row.remove();
           

            // Remove the collapsible serial row (next <tr>)
            if (nextRow && nextRow.querySelector(`#treeviewExample-1_${index}`)) {
                nextRow.remove();
            }

            // Optional: Collapse cleanup
            const collapseElement = document.querySelector(`#treeviewExample-1_${index}`);
            if (collapseElement) {
                collapseElement.classList.remove('show');
            }

            // Optional UI cleanup
            const tableBody = document.querySelector('.table-view-tickets tbody');
            if (tableBody) {
                tableBody.style.borderCollapse = 'collapse';
            }
             
             updateTotals();// update total calculation
        };


     
    window.postItemsToApi = function () {
          $(".form-control").removeClass("is-invalid");
             $(".invalid-feedback").remove();

        const rows = document.querySelectorAll('.table-view-tickets tbody tr');
        const items = [];
        let rowIndex = 0;
        let isValid = true;

        for (let i = 0; i < rows.length; i++) {
            const row = rows[i];

            const quantityInput = row.querySelector('[name^="ItemsList["][name$="].Quantity"]');
            if (!quantityInput) continue; // Skip non-data rows

            const productIdInput = row.querySelector('[name^="ItemsList["][name$="].ProductId"]');
              
            const productVariantIdInput = row.querySelector('[name^="ItemsList["][name$="].ProductVariantId"]');
             const sellingPriceInput = row.querySelector('[name^="ItemsList["][name$="].SellingPrice"]');
                 const buyingPriceInput = row.querySelector('[name^="ItemsList["][name$="].buyingPrice"]');
             
            const discountPercentInput = row.querySelector('[name^="ItemsList["][name$="].DiscountPercentg"]');

              const prodCtgNameInput = row.querySelector('[name^="ItemsList["][name$="].prodCtgName"]');
              const prodSubCtgNameInput = row.querySelector('[name^="ItemsList["][name$="].prodSubCtgName"]');
               const unitNameInput = row.querySelector('[name^="ItemsList["][name$="].unitName"]');

              const prodNameInput = row.querySelector('[name^="ItemsList["][name$="].prodName"]');
                const productImageInput = row.querySelector('[name^="ItemsList["][name$="].imageUrl"]');
            // Hide all error spans first
            row.querySelectorAll('.validation-error').forEach(e => e.style.display = 'none');

            // Manual validation
            if (!quantityInput.value || parseFloat(quantityInput.value) <= 0) {
                const errSpan = row.querySelector('[data-field="Quantity"]');
                if (errSpan) errSpan.style.display = 'block';
                isValid = false;
            }

            if (!sellingPriceInput.value || parseFloat(sellingPriceInput.value) <= 0) {
                const errSpan = row.querySelector('[data-field="SellingPrice"]');
                if (errSpan) errSpan.style.display = 'block';
                isValid = false;
            }

            // Extract index from the hidden input name (e.g., ItemsList[2].ProductId)
            const nameAttr = productIdInput?.getAttribute('name') || '';
            const indexMatch = nameAttr.match(/ItemsList\[(\d+)\]/);
            const index = indexMatch ? parseInt(indexMatch[1]) : rowIndex;

            // 🔄 Get serial numbers from the related serial-body
            const serialTbody = document.getElementById(`serial-body-${index}`);
            const serials = [];
            if (serialTbody) {
                const serialRows = serialTbody.querySelectorAll('tr');
                serialRows.forEach(sRow => {
                    const cells = sRow.querySelectorAll('td');
                    if (cells.length >= 3) {
                        serials.push({
                            serialNumber: cells[0].textContent.trim(),
                            prodSerialNmbrId: cells[1].textContent.trim(),
                            supplierOrgName: cells[2].textContent.trim()
                        });
                    }
                });
            }
              console.log('unit naem ', unitNameInput?.value)
                  console.log('buyingPrice ',buyingPriceInput?.value)
            items.push({
                rowIndex: rowIndex,
                productId: parseInt(productIdInput?.value || 0),
                productVariantId: parseInt(productVariantIdInput?.value || 0),
                quantity: parseFloat(quantityInput?.value || 0),
                sellingPrice: parseFloat(sellingPriceInput?.value || 0),
                discountPercentg: parseFloat(discountPercentInput?.value || 0),
                 categoryName: prodCtgNameInput?.value || '',
                 subCtgName: prodSubCtgNameInput?.value || '',
                 unit: unitNameInput?.value || '',
                 productName: prodNameInput?.value || '',
                 ProductImage: productImageInput?.value || null,
                 buyingPrice: parseFloat(buyingPriceInput?.value) || 0.0,

                  
                serials: serials // ✅ include serial numbers
            });

            rowIndex++;
        }

        if (!isValid) {
            console.warn("Validation failed!");
            return;
        }
         const rawDate = document.getElementById("Invoice_EntryDateTime")?.value;
       //  console.log("Items to send:", items);
          const invoiceSummary = {
                 invoiceId: document.getElementById("Invoice_InvoiceId")?.value,
                 invoiceNumber: document.getElementById("Invoice_InvoiceNumber")?.value,
                  entryBy: document.getElementById("Invoice_EntryBy")?.value|| 0,
                    entryDateTime: rawDate ? new Date(rawDate).toISOString() : new Date().toISOString(),

                   customerId:document.getElementById("CustomerId")?.value,
                   customerName: document.getElementById("CustomerName")?.value,  // first input field
                   mobile: document.getElementById("chooseMobile").value,

                   customerEmail: document.getElementById("CustomerEmail").value, // second CustomerEmail field
                  notificationById: document.getElementById("NotificationById").value,
                  invoiceDate: document.getElementById("InvoiceDateTime").value,
                  seller: document.getElementById("SalesByName").value,
                  paymentTypeId: document.getElementById("PaymentTypeId").value,
                  categoryId: document.getElementById("categorySelect").value,
                  subCategoryId: document.getElementById("subCategorySelect").value,
                  productSearch: document.getElementById("chooseProduct").value,
                  notes: document.getElementById("remarks").value,


                 totalQuantity: parseFloat(document.getElementById("TotalQnty")?.value || 0),
                 totalAmount: parseFloat(document.getElementById("TotalAmount")?.value || 0),
                 totalVat: parseFloat(document.getElementById("TotalVat")?.value || 0),
                 totalDiscount: parseFloat(document.getElementById("TotalDiscount")?.value || 0),
                 totalAddiDiscount: parseFloat(document.getElementById("TotalAddiDiscount")?.value || 0),
                 totalPayable: parseFloat(document.getElementById("TotalPayable")?.value || 0),
                 recieveAmount: parseFloat(document.getElementById("RecieveAmount")?.value || 0),
                 dueAmount: parseFloat(document.getElementById("DueAmount")?.value || 0),

                 
             };


              

             // Validate required fields and highlight invalid ones
               if (!invoiceSummary.customerName) {
                 isValid = false;
                  $("#CustomerName").addClass("is-invalid").after('<div class="invalid-feedback">Customer Name is required.</div>');
             }
               if (!invoiceSummary.mobile) {
                  isValid = false;
                    $("#chooseMobile").addClass("is-invalid").after('<div class="invalid-feedback">Customer Mobile is required.</div>');
              }
                if (!invoiceSummary.notificationById) {
                   isValid = false;
                      $("#NotificationById").addClass("is-invalid").after('<div class="invalid-feedback">Notification Send By is required.</div>');
               }
                 if (!invoiceSummary.paymentTypeId) {
                    isValid = false;
                        $("#PaymentTypeId").addClass("is-invalid").after('<div class="invalid-feedback">Payment Type is required.</div>');
                }

           if (!isValid) {
             console.warn("Validation failed!");
             return;
         }
             // ✅ Final payload
             const payload = {
                 invoiceSummary: invoiceSummary,
                 items: items
             };

             console.log("Payload to send:", payload);
        // You can now send the items with serials to the server
        fetch('/api/Invoice/save-items', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
             body: JSON.stringify(payload)
        })
        .then(res => res.json())
         .then(data => {
          //  console.log("Saved!", data);
               showToast("success",data.message);
               document.getElementById('Invoice_InvoiceKey').value = data.invoiceKey;
        })
        .catch(err => {
          //  console.error("Save failed", err);
              showToast("danger","Save Failed!.");
        });
    }

       window.deleteSerialRow= function (btn) {
          const row = btn.closest('tr');
         if (row) row.remove();
       }
         window.OnProductSearchInOffCanva=  function (event) {
            const query = event.target.value.trim();
          
             let filteredOffCanvaProduct=allProducts.filter(product =>
                 product.prodName?.toLowerCase().includes(query) ||
                 product.sku?.toLowerCase().includes(query) ||
                 product.productCode?.toLowerCase().includes(query)
               );

                
                  window.renderOffCanfaProducts(filteredOffCanvaProduct);
             }


         window.OnProductSerialSearchInOffCanva=  function (event) {
             const query = event.target.value.trim();
             console.log(query);
             console.log(serialsByProductId);
               let filteredSerialNumbers=serialsByProductId.filter(srl =>
                   srl.serialNumber?.toLowerCase().includes(query) 
               //   product.sku?.toLowerCase().includes(query) ||
                //  product.productCode?.toLowerCase().includes(query)
                );
                console.log(serialCurrentIndex);
                console.log(filteredSerialNumbers);
                window.rendarOffCanfvaSerial(filteredSerialNumbers,serialCurrentIndex);

                 
       }
      window.renderOffCanfaProducts = function(filteredItems) {
        const container = document.getElementById("product-container"); // Ensure this div exists in your HTML
        container.innerHTML = ""; // Clear existing content

        filteredItems.forEach(item => {
            const col = document.createElement("div");
            col.className = "col-md-4 ps-md-2";

            col.innerHTML = `
                <div class="card mb-3 zoom-card">
                    <div class="card-body bg-body-tertiary">
                        <div class="tab-content">
                            <div class="tab-pane preview-tab-pane active" role="tabpanel">
                                <div class="avatar avatar-4xl mb-3">
                                    <img class="rounded-soft" src="${item.imageUrl || '../../assets/img/default-product.jpg'}" alt="${item.prodName}" />
                                </div>
                                <div class="product-info">
                                    <p class="mb-1"><strong>Category:</strong> ${item.prodCtgName}</p>
                                    <p class="mb-1"><strong>Brand:</strong> BrandName</p>
                                      <p class="mb-1"><strong>Name:</strong> ${item.prodName}  <span class="text-muted">(${item.productCode})</span></p>
                                    <p class="mb-1"><strong>Price:</strong> ${item.sellingPrice}</p>
                                    <p class="mb-1"><strong>SKU:</strong> ${item.sku}</p>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex justify-content-end mt-3">
                            <button class="btn btn-sm btn-falcon-primary" type="button" onclick="AddItemToProductList(${JSON.stringify(item).replace(/"/g, '&quot;')})">
                                Add
                            </button>
                               <button type="button" title="Info" class="btn btn-sm a-light product-details-btn ml-1" onclick='showProductDetails(${JSON.stringify(item).replace(/'/g, "&apos;")})'>
         <i class="fa fa-info-circle" style="font-size:18px"></i>
     </button>
                        </div>
                    </div>
                </div>
            `;

            container.appendChild(col);
        });
    }

   window.updateRow= function (input) {
         const row = input.closest('tr');
         if (!row) return;

         const qtyInput = row.querySelector('[name*="Quantity"]');
         const priceInput = row.querySelector('[name*="SellingPrice"]');
         const discountInput = row.querySelector('[name*="DiscountPercentg"]');
         const vatInput = row.querySelector('[name*="VatPercent"]');
         const totalInput = row.querySelector('[name*="TotalPrice"]');

         const qty = parseFloat(qtyInput?.value) || 0;
         const price = parseFloat(priceInput?.value) || 0;
         const discount = parseFloat(discountInput?.value) || 0;
         const vatPercentag = parseFloat(vatInput?.value) || 0;
         //console.log(qty,price,discount,vat)

         const lineTotal = qty * price;
         const discountAmt = (lineTotal * discount) / 100;
          const vatAmt =  (lineTotal * vatPercentag) / 100;
         const netTotal = lineTotal - discountAmt + vatAmt;

         if (totalInput) {
             totalInput.value = netTotal.toFixed(2);
         }

         // Update summary based on visible totals
         updateTotals();
     }
         window.updateTotals = function () {
        const qtyInputs = document.querySelectorAll('[name*="Quantity"]');
        const priceInputs = document.querySelectorAll('[name*="SellingPrice"]');
        const discountInputs = document.querySelectorAll('[name*="DiscountPercentg"]');
        const vatInputs = document.querySelectorAll('[name*="VatPercent"]');
        const totalInputs = document.querySelectorAll('[name*="TotalPrice"]');

        let totalQty = 0;
        let totalAmt = 0;
        let totalDiscount = 0;
        let totalVat = 0;

        for (let i = 0; i < qtyInputs.length; i++) {
            const qty = parseFloat(qtyInputs[i]?.value) || 0;
            const price = parseFloat(priceInputs[i]?.value) || 0;
            const discount = parseFloat(discountInputs[i]?.value) || 0;
            const vatPercent = parseFloat(vatInputs[i]?.value) || 0;

            const line = qty * price;
            const disc = (line * discount) / 100;
            const vatAmount = (line * vatPercent) / 100;
            const lineTotal = line - disc + vatAmount;

            totalQty += qty;
            totalDiscount += disc;
            totalVat += vatAmount;
            totalAmt += lineTotal;

            // Update TotalPrice input dynamically
            if (totalInputs[i]) {
                totalInputs[i].value = lineTotal.toFixed(2);
            }
        }

        const addiDisc = parseFloat(document.getElementById('TotalAddiDiscount')?.value) || 0;
        const payable = totalAmt - addiDisc;

        document.getElementById('TotalQnty').value = totalQty.toFixed(2);
        document.getElementById('TotalDiscount').value = totalDiscount.toFixed(2);
        document.getElementById('TotalVat').value = totalVat.toFixed(2);
        document.getElementById('TotalAmount').value = totalAmt.toFixed(2);
        document.getElementById('TotalPayable').value = payable.toFixed(2);
        document.getElementById('TotalPayableLabel').innerText = payable.toFixed(2);

        const received = parseFloat(document.getElementById('RecieveAmount')?.value) || 0;
        const due = payable - received;
        document.getElementById('DueAmount').value = due.toFixed(2);

        $("#itemCount_notification").text(totalQty);
    }

     // window.updateTotals= function() {
     //     const qtyInputs = document.querySelectorAll('[name*="Quantity"]');
     //     const totalInputs = document.querySelectorAll('[name*="TotalPrice"]');
     //     const discountInputs = document.querySelectorAll('[name*="DiscountPercentg"]');
     //     const vatInputs = document.querySelectorAll('[name*="VatPercent"]');
     //      const priceInputs = document.querySelectorAll('[name*="SellingPrice"]');

     //     let totalQty = 0;
     //     let totalAmt = 0;
     //     let totalDiscount = 0;
     //     let totalVat = 0;

     //     for (let i = 0; i < qtyInputs.length; i++) {
     //         const qty = parseFloat(qtyInputs[i]?.value) || 0;
     //         const price = parseFloat(priceInputs[i]?.value) || 0;
     //         const discount = parseFloat(discountInputs[i]?.value) || 0;
     //         const vatPercentag = parseFloat(vatInputs[i]?.value) || 0;
     //         const total = parseFloat(totalInputs[i]?.value) || 0;

     //         totalQty += qty;

     //         const line = qty * price;

     //         const disc = (line * discount) / 100;
     //           totalDiscount += disc;

     //        const vatAmount =(line * vatPercentag) / 100;
     //              totalVat += vatAmount;

     //         const lineTotal = line - disc + vatAmount;
     //         totalAmt += total;
     //     }

     //      const addiDisc = parseFloat(document.getElementById('TotalAddiDiscount')?.value) || 0;

     //     document.getElementById('TotalQnty').value = totalQty.toFixed(2);
     //     document.getElementById('TotalDiscount').value = totalDiscount.toFixed(2);
     //     document.getElementById('TotalVat').value = totalVat.toFixed(2);
     //     document.getElementById('TotalAmount').value = totalAmt.toFixed(2);
     //   //  console.log(totalAmt,totalVat,totalDiscount,addiDisc)
     //       const payable = (totalAmt - addiDisc);
     //     document.getElementById('TotalPayable').value = payable.toFixed(2);
     //     document.getElementById('TotalPayableLabel').innerText =payable.toFixed(2);

     //     const received = parseFloat(document.getElementById('RecieveAmount')?.value) || 0;
     //     const due = payable - received;
     //     document.getElementById('DueAmount').value = due.toFixed(2);

     //       $("#itemCount_notification").text(totalQty);
     // }

       window.loadSubCategories=function(categoryId, selectedSubCategoryId) {
          var subcategorySelect = $('#subCategorySelect');

         // Clear existing options
         subcategorySelect.empty();
         subcategorySelect.append('<option value="">Select Product Sub Category</option>');

         if (categoryId) {
             // Make AJAX call to fetch subcategories
             $.ajax({
                 url: '/api/ProductSubCategory/ByCategoryId?categoryId=' + categoryId,
                 type: 'GET',
                 dataType: 'json',
                 success: function (response) {
                     if (response.isSuccess && response.list) {
                         // Populate subcategories
                         $.each(response.list, function (index, item) {
                             subcategorySelect.append(
                                 $('<option></option>').val(item.prodSubCtgId).text(item.prodSubCtgName)
                             );
                         });

                         // Set the selected subcategory if provided
                         if (selectedSubCategoryId) {
                             subcategorySelect.val(selectedSubCategoryId);
                         }
                     } else {
                         console.error('No subcategories found or API error:', response.message);
                     }
                 },
                 error: function (xhr, status, error) {
                     console.error('Error fetching subcategories:', error);
                 }
             });
         }
     }
       // Call on change of category
         $(document).ready(function () {
             $('#categorySelect').on('change', function () {
                 var selectedCategoryId = $(this).val();
                 loadSubCategories(selectedCategoryId, null);
                 
                  
             });

             // // Optional: auto-load subcategories if editing existing data
             // var presetCategoryId = $('#categorySelect').val();
             //  var presetSubCategoryId = $('#subCategorySelect').val();
             // if (presetCategoryId && presetSubCategoryId) {
             //     loadSubCategories(presetCategoryId, presetSubCategoryId);
             // }
         });
        
    })();


</script>
 
<script>
      function initializeTinyMCE() {
       tinymce.remove(); // Remove any existing TinyMCE instances
       tinymce.init({
           selector: '.tinymce', // Target all elements with the `tinymce` class
           plugins: 'lists link image table code',
           toolbar: 'undo redo | bold italic | alignleft aligncenter alignright | bullist numlist | link image',
           height: 300
       });
     }
    
       function ShippingWithPayment() {
        let invoiceKey = document.getElementById('Invoice_InvoiceKey').value;
        console.log(invoiceKey);
        if(invoiceKey == null || invoiceKey == undefined || invoiceKey == "") {
            showToast("danger","Create Invoice First!.");
            return;
        }
        // Correct way to use a template literal
        loadPage(`/Invoice/ShippingWithPayment/key=${invoiceKey}`);
    }


      function showProductDetails(item) {
        
        // Left Column: Item Information
        document.getElementById('vatAmount').textContent = item.vatAmount ? `${item.vatAmount}` : 'N/A';
        document.getElementById('discountAmount').textContent = item.discountAmount ? `${item.currencySymbol}${item.discountAmount}` : 'N/A';
        document.getElementById('date').textContent = item.givenEntryDate ? new Date(item.givenEntryDate).toLocaleDateString() : 'N/A';
        document.getElementById('warranty').textContent = item.warrentYear ? `${item.warrentYear} year${item.warrentYear > 1 ? 's' : ''}` : 'N/A';
        const supplierLink = document.getElementById('supplierLink');
        supplierLink.href = item.supplirLinkId ? `/supplier/${item.supplirLinkId}` : '#'; // Adjust URL as needed
        supplierLink.textContent = item.supplirLinkId ? 'View Supplier' : 'N/A';
        document.getElementById('remarks').textContent = item.remarks || 'N/A';
        //document.getElementById('descriptions').innerHTML = item.prodDescription || 'N/A'; // Use innerHTML for HTML content
        document.getElementById('importedFrom').textContent = item.importedForm || 'N/A';
        document.getElementById('category').textContent = item.prodCtgName || 'N/A';

        // Middle Column: Pricing & Quantity
        document.getElementById('subCategory').textContent = item.prodSubCtgName || 'N/A';
        document.getElementById('nameModel').textContent = item.prodName || 'N/A';
        document.getElementById('buyingPrice').textContent = item.buyingPrice ? `${item.currencySymbol}${item.buyingPrice}` : 'N/A';
        document.getElementById('sellingPrice').textContent = item.sellingPrice ? `${item.currencySymbol}${item.sellingPrice}` : 'N/A';
        document.getElementById('unitType').textContent = item.unitName || 'N/A';
        document.getElementById('openingQuantity').textContent = item.openingQnty ?? 'N/A';
        document.getElementById('alertQuantity').textContent = item.alertQnty ?? 'N/A';
        document.getElementById('vatPercentage').textContent = item.vatPercent ? `${item.vatPercent}%` : 'N/A';
        document.getElementById('discountPercentage').textContent = item.discountPercentg ? `${item.discountPercentg}%` : 'N/A';

        // Right Column: Image and Additional Information
        document.getElementById('productImage').src = item.imageUrl || '../../assets/img/gallery/default.jpg';
        document.getElementById('stockAvailability').textContent = item.stockQuantity > 0 ? 'In Stock' : 'Out of Stock';
        document.getElementById('sku').textContent = item.sku || 'N/A';
        document.getElementById('supplierRating').textContent = item.rating ?? 'N/A';
        document.getElementById('shippingTime').textContent = item.shippingDays || 'N/A';
     
        const editor = tinymce.get('tinymce-editor');
    if (editor) {
        editor.setContent(item.prodDescription || 'N/A');
    } else {
        console.error('TinyMCE editor not initialized');
        document.getElementById('tinymce-editor').value = item.prodDescription || 'N/A';
    }
        // Show the modal
        const modal = new bootstrap.Modal(document.getElementById('staticBackdrop'));
        modal.show();
    }
</script>

  